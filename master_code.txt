#Wir wollen hier die allgemeinen verwendeten Algorithmen zur Nachvollziehbarkeit der Ergebnisse auflisten. Der Code ist in GNU  #geschrieben. Strukturell geben wir zunächst die allgemeinen Algorithmen an, es folgt dann eine Beispielanwendung der #Partikelfilter (neuronaler Partikelfilter und Ensemble Partikelfitler) im allgemeinen Fall sowie eine Beispielanwendung im Fall #mit unvollständigen Signalen. Diese Beispielanwendung kann durch ein Compilieren der Funktionen bis zu dem Punkt der Anwendung #ausgeführt werden. 
##############################################################
#Allgemeine Definition der generativen Funktionen
##############################################################
function f = f(x,a,b)
  f = a*x*(b-x^2);
endfunction

function g_1 = g1(x)
  g_1 = x;
endfunction

function g_2 = g2(x)
  g_2 = tanh(2*x);
endfunction

function g = g(zdelta)
  g = [g1(zdelta),g2(zdelta)];
endfunction
##############################################################

##############################################################
#Generiere einen Pfad des Hidden States 
#mit dem Euler-Maruyama-Verfahren
##############################################################
#Beispiel: p_x = path_m(50000,1/200,1,3,1);
##############################################################
#Input
#time: Gesamte Anzahl an Zeitschritten
#delta: Groesse eines Zeitschritts
#sigma: Staerke des Rauschens
#a,b: Parameter in der Driftfunktion
##############################################################
#Output
#Pfad des Hidden State 
##############################################################
function pa = path_m(time, delta,sigma,a,b)
  p = zeros(1, time);
  for i = 2:time 
    p(i) = p(i-1) + f(p(i-1),a,b)*delta + ...
	   sqrt(sigma)*randn(1)*sqrt(delta);
  endfor
  pa = p;
endfunction
##############################################################

##############################################################
#Generiere die Beobachtungen mit dem Euler-Maruyama-Verfahren
##############################################################
#Beispiel: 
#p_g1 = path_g1(50000,1/2000,0.01,p_x);
#p_g2 = path_g2(50000,1/2000,0.01,p_x);
##############################################################
#Input
#time: Gesamte Anzahl an Zeitschritten
#delta: Groesse eines Zeitschritts
#sigma: Staerke des Rauschens
#p_x: Pfad des Hidden State
##############################################################
#Output
#Integrierte Beobachtung des Hidden State
##############################################################
function p_g1 = path_g1(time,delta,sigma,p_x)
  p = zeros(1, time);
  for i = 2:time 
    p(i) = p(i-1) + g1(p_x(i))*delta + ...
	    sqrt(sigma)*randn(1)*sqrt(delta);
  endfor
  p_g1= p;
 endfunction
function p_g2 = path_g2(time,delta,sigma,p_x)
  p = zeros(1, time);
  for i = 2:time 
    p(i) = p(i-1) + g2(p_x(i))*delta + ...
	    sqrt(sigma)*randn(1)*sqrt(delta);
  endfor
  p_g2= p;
 endfunction
##############################################################

##############################################################
#Partikelupdate im neuronalen Partikelfilter
##############################################################
#Beispiel: 
#[z,W] = npf(partarr(:,i-1), ... 
#[p_g1(i)-p_g1(i-1);p_g2(i)-p_g2(i-1)], ...
#1/200, particles,[1/0.01,0;0,1/0.01]);
#Siehe unten fuer ein ausfuehrliches Beispiel
##############################################################
#Input
#zdelta: Partikel des vorherigen Zeitschritts
#d_g: Vektor mit der Veraenderung in der Beobachtung
#delta: Groesse eines Zeitschritts
#sig: Kovarianzmatrix des Rauschens
##############################################################
#Output
#Partikelupdate um einen Zeitschritt nach NPF
##############################################################
function [z,W] = npf(zdelta,d_g,delta,N,sig,ak)
 gz = g(zdelta); 
 W = cov(zdelta,gz)*sig;
 nov = zeros(columns(gz),N);
 z= zeros(1,N);
for k = 1:N
  nov(:,k) = d_g - transpose(gz(k,:))*delta;
  z(k) = zdelta(k) + f(zdelta(k),3,1)*delta ...
             + W*nov(:,k)+randn(1)*sqrt(delta);
endfor
z = z;
W = W;
return
endfunction
##############################################################

##############################################################
#Partikelupdate im Ensemble Kalmanfilter
##############################################################
#Beispiel: 
#[z,W] = EnKF(partarr(:,i-1), ... 
#[p_g1(i)-p_g1(i-1);p_g2(i)-p_g2(i-1)], ...
#1/200, particles,[1/0.01,0;0,1/0.01]);
#Siehe unten fuer ein ausfuehrliches Beispiel
##############################################################
#Input
#zdelta: Partikel des vorherigen Zeitschritts
#d_g: Vektor mit der Veraenderung in der Beobachtung
#delta: Groesse eines Zeitschritts
#sig: Kovarianzmatrix des Rauschens
##############################################################
#Output
#Partikelupdate um einen Zeitschritt im EnKF
##############################################################
function [z,W] = EnKF(zdelta,d_g,delta,N,sig)
 gz = g(zdelta);
 W = cov(zdelta,gz)*sig;
 nov = zeros(columns(gz),N);
 z= zeros(1,N);
g_e = mean(gz);
for k = 1:N
  nov(:,k) = ... 
d_g - 0.5 * (transpose(gz(k,:)) + transpose(g_e)) * delta;
  z(k) = zdelta(k) + f(zdelta(k),3,1)*delta + ... 
	   W*nov(:,k)+randn(1)*sqrt(delta);
endfor
z = z;
W = W;
return
endfunction
##############################################################

##############################################################
#Beispielanwendung mit visueller Darstellung
##############################################################
#Initialisierung der Pfade
p_x = path_m(50000,1/200,1,3,1);
p_g1 = path_g1(50000,1/200,0.1,p_x);
p_g2 = path_g2(50000,1/200,0.1,p_x);

#Anwendung des Partikelfilters, alternativ ersetze npf mit EnKF
time = 5000;
particles = 50;
partarr = zeros(particles,time);
partmean = zeros(time,1);
weights = zeros(time,2);
for i = 2:time
   [z,W] = npf(partarr(:,i-1), ... 
	      [p_g1(i)-p_g1(i-1);p_g2(i)-p_g2(i-1)], ...
                 1/200, particles,[1/0.1,0;0,1/0.1]);
   partarr(:,i) = z;
   partmean(i) = mean(z);
   weights(i,:) = W;
endfor 

#Grafische Darstellung
subplot (4, 1, 1)
plot(p_x(1:5000));
xlim([0 5000])
ylim([-2 2])
title ("Pfad des Hidden State");
subplot (4, 1, 2)
plot (partmean(1:5000));
xlim([0 5000])
ylim([-2 2])
title ("Pfad des NPF");
subplot (4, 1, 3)
plot (weights(:,1));
title("Wichtung des visuellen Signals")
subplot (4, 1, 4)
plot (weights(:,2));
title("Wichtung des auditiven Signals")
##############################################################

##############################################################
#Beispielanwendung fuer unvollstaendige Signale
##############################################################
#Initialisiere zunaechst die Phasen des Liedschlags
##############################################################
function r_bl = r_blind(t) 
bl = ones(t,1);
n = 1; 
k = 1;
i = 1;
while((i + 1000) <= t) 
b_t = (randn + 4)*200;
if(b_t < 0)
b_t = 0;
endif
 while(n <= b_t)
  bl(i) = 1;
  n++;
  i++; 
 endwhile
  while(k <= 80)
  bl(i) = 0;
  k++;
  i++;
  endwhile
 n = 1; 
 k = 1; 
endwhile
r_bl = bl; 
endfunction

bl = r_blind(50000);
################################################################
#Definiere den habtischen Wahrnehmungsbereich
################################################################
function g_3 = g3(x)
 if(x < -0.9 || x > 0.9)
 g_3 = 0;
 else g_3 = x;
 endif
endfunction
################################################################
#Generiere unvollstaendige Beobachtungen
################################################################
function p_gb = path_gb(time,delta,sigma,bl,p_x)
  p = zeros(1, time);
  for i = 2:time 
    if(bl == 0)
    p(i) = p(i-1);
    else p(i) = p(i-1) + g1(p_x(i))*delta ... 
                     + sqrt(sigma)*randn(1)*sqrt(delta);
    endif
  endfor
  p_gb= p;
 endfunction

function p_g2 = path_g2(time,delta,sigma,p_x)
  p = zeros(1, time);
  for i = 2:time 
    p(i) = p(i-1) + g2(p_x(i))*delta ...
	    + sqrt(sigma)*randn(1)*sqrt(delta);
  endfor
  p_g2= p;
 endfunction

function p_g3 = path_g3(time,delta,sigma,p_x)
  p = zeros(1, time);
  for i = 2:time 
    p(i) = p(i-1) + g3(p_x(i))*delta ...
	     + sqrt(sigma)*randn(1)*sqrt(delta);
  endfor
  p_g3= p;
 endfunction

function g = g(zdelta)
g = [g1(zdelta),g2(zdelta),arrayfun(@g3,zdelta)];
endfunction
################################################################
#Anwendung des Partikelfilters
################################################################
p_gb = path_gb(10000,1/200,0.1,bl,p_x);
p_g2 = path_g2(10000,1/200,0.1,p_x);
p_g3 = path_g3(10000,1/200,0.1,p_x);

time = 7000;
particles = 50;
partarr = zeros(particles,time);
partmean = zeros(time,1);
weights = zeros(time,3);
for i = 2:time
   [z,W] = npf(partarr(:,i-1) ...
    ,[p_gb(i)-p_gb(i-1); p_g2(i)-p_g2(i-1);p_g3(i)-p_g3(i-1)] ...
    ,1/200, particles, ...
    [bl(i)*1/0.1,0,0; 0,1/0.1, 1; 0,0,0.1/0.1]);
   partarr(:,i) = z;
   partmean(i) = mean(z);
   weights(i,:) = W;
endfor 
toc

subplot (5, 1, 1)
plot(p_x(2000:7000));
xlim([0 5000])
ylim([-2 2])
title ("Pfad des Hidden State");
subplot (5, 1, 2)
plot (partmean(2000:7000));
xlim([0 5000])
ylim([-2 2])
title ("Pfad des NPF");
subplot (5, 1, 3)
plot (weights(2000:7000,1));
title("Wichtung des visuellen Signals")
xlim([0 5000])
subplot (5, 1, 4)
plot (weights(2000:7000,2));
title("Wichtung des auditiven Signals")
xlim([0 5000])
subplot (5, 1, 5)
plot (weights(2000:7000,3));
title("Wichtung des habtischen Signals")
xlim([0 5000])
ylim([0 1])
################################################################
